#!/usr/bin/env python3

from math import sin, cos, acos, atan, hypot, radians, degrees, sqrt


class Point(object):
    def __init__(self, x, y):
        self.x = float(x)
        self.y = float(y)

    def __add__(self, other):
        if isinstance(other, type(self)):
            return type(self)(self.x + other.x, self.y + other)
        else:
            NotImplemented

    def __sub__(self, other):
        if isinstance(other, type(self)):
            return type(self)(self.x - other.x, self.y - other.y)
        else:
            return NotImplemented

    def move(self, to):
        if isinstance(to, type(self)):
            return Vector2D(to.x - self.x, to.y - self.y)
        else:
            TypeError


class Vector2D(object):

    def __init__(self, x, y):
        self.x = float(x)
        self.y = float(y)
        self.length = hypot(x, y)
        self.angle = degrees(atan(y/x))
        self.unit = "{}i + {}j".format(x, y)

    def __add__(self, other):
        if isinstance(other, type(self)):
            return type(self)(self.x + other.x, self.y + other.y)
        elif isinstance(other, (list, tuple)) and len(other) == 2:
            return type(self)(self.x + other[0], self.y + other[1])
        elif isinstance(other, (dict, set)) and 'x' in other and 'y' in other and len(other) == 2:
            return type(self)(self.x + other['x'], self.y + other['y'])
        else:
            return NotImplemented

    def __sub__(self, other):
        if isinstance(other, type(self)):
            return type(self)(self.x - other.x, self.y - other.y)
        elif isinstance(other, (list, tuple)) and len(other) == 2:
            return type(self)(self.x - other[0], self.y - other[1])
        elif isinstance(other, dict) and 'x' in other and 'y' in other and len(other) == 2:
            return type(self)(self.x - other['x'], self.y - other['y'])
        else:
            return NotImplemented

    def __mul__(self, other):
        if isinstance(other, type(self)):
            return self.x * other.x + self.y * other.y
        elif isinstance(other, (int, float)):
            return type(self)(self.x * other, self.y * other)
        else:
            return NotImplemented

    def __truediv__(self, other):
        if isinstance(other, type(self)):
            return self.x / other.x + self.y / other.y
        elif isinstance(other, (int, float)):
            return type(self)(self.x / other.x, self.y / other.y)
        else:
            return NotImplemented

    def __rmul__(self, other):
        if isinstance(other, (int, float)):
            return type(self)(self.x * other, self.y * other)
        else:
            return NotImplemented

    def __rtruediv__(self, other):
        if isinstance(other, (int, float)):
            return type(self)(self.x / other, self.y / other)
        else:
            return NotImplemented

    def __len__(self):
        return self.length

    def __getitem__(self, item):
        item_type = type(item)

        if item_type is str:
            if item == 'x':
                return self.x
            elif item == 'y':
                return self.y
            else:
                raise KeyError
        elif item_type is int:
            if item == 0:
                return self.x
            elif item == 1:
                return self.y
            else:
                raise IndexError
        else:
            raise TypeError

    def __repr__(self):
        return "Vector2D({}, {})".format(self.x, self.y)

    def __eq__(self, other):
        if isinstance(other, type(self)):
            return self.x == other.x and self.y == other.y
        else:
            return False

    def __ne__(self, other):
        if isinstance(other, type(self)):
            return self.x != other.x or self.y != other.y

    def rotate(self, deg):
        r = radians(deg)
        rcos = cos(r)
        rsin = sin(r)
        x = self.x * rcos - self.y * rsin
        y = self.x * rsin + self.y * rcos
        return type(self)(x, y)

    def normalize(self):
        return self.scale(1)

    def truncate(self, max_length):
        if self.length > max_length:
            return self.scale(max_length)
        return self

    def scale(self, length):
        try:
            scale = length / self.length
        except ZeroDivisionError:
            scale = 1
        return self * scale

    def dot(self, other):
        if isinstance(other, type(self)):
            return self.length * other.length * cos(abs(self.angle - other.angle))
        else:
            return TypeError

    def angle_diff(self, other):
        if isinstance(other, type(self)):
            return degrees(acos(self.dot(other) / (self.length * other.length)))


class Vector3D(object):

    def __init__(self, x, y, z):
        self.x = float(x)
        self.y = float(y)
        self.z = float(z)
        self.length = sqrt(x**2 + y**2 + z**2)
        self.unit = "{}i + {}j + {}k".format(x, y, z)

    def __add__(self, other):
        if isinstance(other, type(self)):
            return type(self)(self.x + other.x, self.y + other.y, self.z + other.z)
        elif isinstance(other, (list, tuple)) and len(other) == 3:
            return type(self)(self.x + other[0], self.y + other[1], self.z + other[2])
        elif isinstance(other, (dict, set)) and 'x' in other and 'y' in other and 'z' in other and len(other) == 3:
            return type(self)(self.x + other['x'], self.y + other['y'], self.z + other['z'])
        else:
            return NotImplemented

    def __sub__(self, other):
        if isinstance(other, type(self)):
            return type(self)(self.x - other.x, self.y - other.y, self.z - other.z)
        elif isinstance(other, (list, tuple)) and len(other) == 3:
            return type(self)(self.x - other[0], self.y - other[1], self.z - other[2])
        elif isinstance(other, dict) and 'x' in other and 'y' in other and 'z' in other and len(other) == 3:
            return type(self)(self.x - other['x'], self.y - other['y'], self.z - other['z'])
        else:
            return NotImplemented

    def __mul__(self, other):
        if isinstance(other, type(self)):
            return self.x * other.x + self.y * other.y + self.z * other.z
        elif isinstance(other, (int, float)):
            return type(self)(self.x * other, self.y * other, self.z * other)
        else:
            return NotImplemented

    def __truediv__(self, other):
        if isinstance(other, type(self)):
            return self.x / other.x + self.y / other.y + self.z / other.z
        elif isinstance(other, (int, float)):
            return type(self)(self.x / other, self.y / other, self.z / other)
        else:
            return NotImplemented

    def __rmul__(self, other):
        if isinstance(other, (int, float)):
            return type(self)(self.x * other, self.y * other, self.z * other)
        else:
            return NotImplemented

    def __rtruediv__(self, other):
        if isinstance(other, (int, float)):
            return type(self)(self.x / other, self.y / other, self.z / other)
        else:
            return NotImplemented

    def __len__(self):
        return self.length

    def __getitem__(self, item):
        item_type = type(item)

        if item_type is str:
            if item == 'x':
                return self.x
            elif item == 'y':
                return self.y
            elif item == 'z':
                return self.z
            else:
                raise KeyError
        elif item_type is int:
            if item == 0:
                return self.x
            elif item == 1:
                return self.y
            elif item == 2:
                return self.z
            else:
                raise IndexError
        else:
            raise TypeError

    def __repr__(self):
        return "Vector3D({}, {}, {})".format(self.x, self.y, self.z)

    def __eq__(self, other):
        if isinstance(other, type(self)):
            return self.x == other.x and self.y == other.y and self.z == other.z
        else:
            return False

    def __ne__(self, other):
        if isinstance(other, type(self)):
            return self.x != other.x or self.y != other.y or self.z != other.z
